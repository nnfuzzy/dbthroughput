x[1]
x[1]$ts
x[2]$id
x[2]
x[1]
x[2
]
x
rs <- mongo.find.batch(mongo, "throughput.r_throughput_src",data.frame = T)
#aggregation vector version
aggregate2Mongo <- function(x,collection="throughput.r_throughput_agg"){
ts <- x$ts
id <- x$id
wd <- as.character(wday(as.POSIXct(ts,origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(ts,origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(id,0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns2,criteria,objNew,mongo.update.upsert)
}
d_ply(.data = rs,1,aggregate2Mongo)
aggregate2Mongo <- function(x,ns="throughput.r_throughput_agg"){
ts <- x$ts
id <- x$id
wd <- as.character(wday(as.POSIXct(ts,origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(ts,origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(id,0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns,criteria,objNew,mongo.update.upsert)
}
d_ply(.data = rs,1,aggregate2Mongo)
args
rm(args)
args
arguments <- commandArgs(trailingOnly = TRUE)
arguments <- commandArgs(trailingOnly = TRUE)
if(exists("arguments")) {
N_IDS <- as.numeric(args[1])
STEPS_SECONDS <-  as.numeric(args[2])
} else {
N_IDS <- 1000
STEPS_SECONDS <-  2000
}
if(exists("arguments")) {
N_IDS <- as.numeric(arguments[1])
STEPS_SECONDS <-  as.numeric(arguments[2])
} else {
N_IDS <- 1000
STEPS_SECONDS <-  2000
}
N_IDS
source("mongothroughput_fun.R")
install.packages("rbenchmark")
library(rbenchmark)
benchmark(1:100)
loop_insert <- function(dt_sequence,mongo){
for(i in 1:(length(dt_sequence))){
ts__ = as.numeric(dt_sequence[i])
#dt = ymd_hms(as.POSIXct(ts,origin = "1970-01-01"))
src_data <- mongo.bson.from.list(list(ts=ts__,id=rndint(N_IDS)))
mongo.insert(mongo, "throughput.r_throughput_src",src_data)
}
}
benchmark(loop_insert(dt_sequence=dt_sequence,mongo=mongo),replications = 2)
source("mongothroughput_fun.R")
source("mongothroughput_fun.R")
dt_sequence <- seq(from =as.POSIXct('2013-01-01 00:00:00',tz = '%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
to=as.POSIXct('2014-01-01 00:00:00',tz='%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
by=STEPS_SECONDS)
N_IDS <- 1000
STEPS_SECONDS <-  2000
dt_sequence <- seq(from =as.POSIXct('2013-01-01 00:00:00',tz = '%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
to=as.POSIXct('2014-01-01 00:00:00',tz='%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
by=STEPS_SECONDS)
benchmark(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo),replications = 1)
benchmark(vectorize_insert(dt_sequence,N_IDS),replications = 1)
vectorize_insert <- function(x,N_IDS,ns="throughput.r_throughput_src",drop=T){
if(drop){
mongo.drop(mongo,ns)
}
#dt = ymd_hms(as.POSIXct(x,origin = "1970-01-01"))
ts__ = as.numeric(x)
src_data <- mongo.bson.from.list(list(ts=ts__,id=rndint(N_IDS)))
mongo.insert(mongo,ns,src_data)
return(NULL)
}
library(rmongodb)
library(lubridate)
library(plyr)
library(rbenchmark)
### Install dependencies
# install.packages("rmongodb")
# install.packages("lubridate")
# install.packages("rbenchmark")
# install.packages("rplyr")
source("mongothroughput_fun.R")
N_IDS <- 1000
STEPS_SECONDS <-  2000
benchmark(vectorize_insert(dt_sequence,N_IDS),replications = 1)
dt_sequence <- seq(from =as.POSIXct('2013-01-01 00:00:00',tz = '%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
to=as.POSIXct('2014-01-01 00:00:00',tz='%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
by=STEPS_SECONDS)
mongo.drop(mongo,ns)
mongo.drop(mongo,ns)
benchmark(vectorize_insert(dt_sequence,N_IDS),replications = 1)
library(rmongodb)
library(lubridate)
library(plyr)
library(rbenchmark)
### Install dependencies
# install.packages("rmongodb")
# install.packages("lubridate")
# install.packages("rbenchmark")
# install.packages("rplyr")
source("mongothroughput_fun.R")
N_IDS <- 1000
STEPS_SECONDS <-  2000
mongo <- mongo.create(db=MONGODB)
mongo.drop(mongo,ns)
benchmark(vectorize_insert(dt_sequence,N_IDS),replications = 1)
benchmark(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo),replications = 1)
mongo.drop(mongo,ns)
benchmark(vectorize_insert(dt_sequence,N_IDS),replications = 1)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x))),replications = 1)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x)),replications = 1)
mongo.drop(mongo,ns)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 1)
mongo.drop(mongo,ns)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 1)
rs <- mongo.find.all(mongo, "throughput.r_throughput_src",data.frame = T)
len(rs)
length(rs)
dim(rs)
mongo.drop(mongo,ns)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 1)
mongo.drop(mongo,ns)
ns
ns <- "throughput.r_throughput_src"
mongo.drop(mongo,ns)
benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 0)
benchmark(mongo.drop(mongo,ns); sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 2)
mongo.drop(mongo,ns)
system.time(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)))
system.time(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo))
system.time(rs <- mongo.find.all(mongo, "throughput.r_throughput_src",data.frame = T))
system.time(loop_aggregation(rs = rs))
system.time(loop_aggregation(rs = rs,mongo = mongo,ns=ns))
system.time(loop_aggregation(rs = rs,mongo = mongo))
mongo.drop(mongo,ns)
system.time(d_ply(.data = rs,1,vectorize_aggregation(rs=rs)))
system.time(d_ply(.data = rs,1,vectorize_aggregation(rs=rs,mongo=mongo)))
library(rmongodb)
library(lubridate)
library(plyr)
library(rbenchmark)
### Install dependencies
# install.packages("rmongodb")
# install.packages("lubridate")
# install.packages("rbenchmark")
# install.packages("rplyr")
source("mongothroughput_fun.R")
mongo.drop(mongo,ns)
system.time(d_ply(.data = rs,1,vectorize_aggregation(rs=rs,mongo=mongo)))
system.time(d_ply(.data = rs,1,vectorize_aggregation(mongo=mongo)))
system.time(d_ply(.data = rs,1,vectorize_aggregation(x,mongo=mongo)))
mongo.drop(mongo,ns)
ns <- "throughput.r_throughput_agg"
system.time(d_ply(.data = rs,1,vectorize_aggregation))
mongo.drop(mongo,ns)
mongo.drop(mongo,ns)
vectorize_aggregation <- function(x,ns="throughput.r_throughput_agg"){
ts <- x$ts
id <- x$id
wd <- as.character(wday(as.POSIXct(ts,origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(ts,origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(id,0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns,criteria,objNew,mongo.update.upsert)
}
system.time(d_ply(.data = rs,1,vectorize_aggregation))
library(rmongodb)
library(lubridate)
library(plyr)
library(rbenchmark)
### Install dependencies
# install.packages("rmongodb")
# install.packages("lubridate")
# install.packages("rbenchmark")
# install.packages("rplyr")
source("mongothroughput_fun.R")
N_IDS <- 1000
STEPS_SECONDS <-  200
mongo <- mongo.create(db=MONGODB)
dt_sequence <- seq(from =as.POSIXct('2013-01-01 00:00:00',tz = '%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
to=as.POSIXct('2014-01-01 00:00:00',tz='%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
by=STEPS_SECONDS)
ns <- "throughput.r_throughput_src"
#insert loop
#benchmark(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo),replications = 1)
system.time(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo))
# insert  vectorize solution
mongo.drop(mongo,ns)
#benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 1)
system.time(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)))
library(rmongodb)
library(lubridate)
library(plyr)
library(rbenchmark)
source("mongothroughput_fun.R")
N_IDS <- 1000
STEPS_SECONDS <-  200
mongo <- mongo.create(db=MONGODB)
mongo <- mongo.create(db='throughput')
dt_sequence <- seq(from =as.POSIXct('2013-01-01 00:00:00',tz = '%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
to=as.POSIXct('2014-01-01 00:00:00',tz='%Y-%m-%d %H:%M:%S',origin="1970-01-01"),
by=STEPS_SECONDS)
ns <- "throughput.r_throughput_src"
#insert loop
#benchmark(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo),replications = 1)
system.time(loop_insert(dt_sequence=dt_sequence,N_IDS, mongo=mongo))
# insert  vectorize solution
mongo.drop(mongo,ns)
#benchmark(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)),replications = 1)
system.time(sapply(dt_sequence,function(x) vectorize_insert(x,N_IDS = N_IDS)))
#########################
#is there no lazy cursor?
system.time(rs <- mongo.find.all(mongo, "throughput.r_throughput_src",data.frame = T))
##########################
ns <- "throughput.r_throughput_agg"
system.time(loop_aggregation(rs = rs,mongo = mongo))
mongo.drop(mongo,ns)
system.time(d_ply(.data = rs,1,vectorize_aggregation))
#########################
#is there no lazy cursor?
system.time(rs <- mongo.find.all(mongo, "throughput.r_throughput_src",data.frame = T))
rs <- mongo.find.all(mongo, "throughput.r_throughput_src",data.frame = T)
dim(rs)
cursor <- mongo.find(mongo, "test.people",'{}', limit=100L)
cursor <- mongo.find(mongo, "throughput.r_throughput_src",'{}', limit=100L)
mongo <- mongo.create(db='throughput')
cursor <- mongo.find(mongo, "throughput.r_throughput_src",'{}', limit=100L)
while (mongo.cursor.next(cursor))
print(mongo.cursor.value(cursor))
mongo.cursor.destroy(cursor)
ns <- "throughput.r_throughput_agg"
loop_aggregation <- function(rs,mongo,ns="throughput.r_throughput_agg",drop=T){
if(drop){
mongo.drop(mongo,ns)
}
cursor <- mongo.find(mongo,ns,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
wd <- as.character(wday(as.POSIXct(rs[i,1],origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(rs[i,1],origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(rs[i,2],0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
system.time(loop_aggregation(rs = rs,mongo = mongo))
install.packages("stringr")
loop_aggregation <- function(rs,mongo,ns_src="throughput.r_throughput_src",
ns_agg="throughput.r_throughput_agg"
drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
wd <- as.character(wday(as.POSIXct(rs[i,1],origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(rs[i,1],origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(rs[i,2],0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
loop_aggregation <- function(rs,mongo,ns_src="throughput.r_throughput_src",
ns_agg="throughput.r_throughput_agg"
drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
wd <- as.character(wday(as.POSIXct(rs[i,1],origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(rs[i,1],origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(rs[i,2],0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
loop_aggregation <- function(rs,mongo,ns_src="throughput.r_throughput_src",ns_agg="throughput.r_throughput_agg",drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
wd <- as.character(wday(as.POSIXct(rs[i,1],origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(rs[i,1],origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(rs[i,2],0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
loop_aggregation <- function(rs,mongo,ns_src="throughput.r_throughput_src",
ns_agg="throughput.r_throughput_agg",drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
wd <- as.character(wday(as.POSIXct(rs[i,1],origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(rs[i,1],origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(rs[i,2],0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
ns <- "throughput.r_throughput_agg"
mongo.index.create(mongo, ns, '{"id":1}')
system.time(loop_aggregation(rs = rs,mongo = mongo))
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
cursor
}
ns_src="throughput.r_throughput_src"
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
cursor
}
ns_src="throughput.r_throughput_src"
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
print(cursor)
}
ns_src="throughput.r_throughput_src"
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
print(unclass(cursor))
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
print(mongo.cursor.to.list())
}
ns_src="throughput.r_throughput_src"
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
print(mongo.cursor.to.list(cursor))
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
print(mongo.cursor.value(cursor))
}
ns_src="throughput.r_throughput_src"
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
tmp <- (mongo.cursor.value(cursor))
break
}
tmp
tmp$id
unclass(tmp)
tmp
tmp[1]
tmp[2]
tmp[1][1]
names(tmp)
names(tmp)
summary(tmp)
mongo.bson.to.list(tmp)
l <- mongo.bson.to.list(tmp)
l$ts
loop_aggregation <- function(rs,mongo,ns_src="throughput.r_throughput_src",
ns_agg="throughput.r_throughput_agg",drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
tmp <- (mongo.cursor.value(cursor))
l <- mongo.bson.to.list(tmp)
wd <- as.character(wday(as.POSIXct(l$ts,origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(l$ts,origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(l$id,0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
mongo.index.create(mongo, ns, '{"id":1}')
mongo <- mongo.create(db='throughput')
ns <- "throughput.r_throughput_agg"
mongo.index.create(mongo, ns, '{"id":1}')
loop_aggregation <- function(mongo,ns_src="throughput.r_throughput_src",
ns_agg="throughput.r_throughput_agg",drop=T){
if(drop){
mongo.drop(mongo,ns_agg)
}
cursor <- mongo.find(mongo,ns_src,'{}',limit=0L)
while(mongo.cursor.next(cursor)){
#print(rs[i,])
tmp <- (mongo.cursor.value(cursor))
l <- mongo.bson.to.list(tmp)
wd <- as.character(wday(as.POSIXct(l$ts,origin = "1970-01-01"),label=T)[1])
hour <- as.character(hour(as.POSIXct(l$ts,origin = "1970-01-01"))[1])
tslot <- sprintf('%s_%s',wd,hour)
#prepare update
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.append(buf, "id", round(l$id,0))
criteria <- mongo.bson.from.buffer(buf)
buf <- mongo.bson.buffer.create()
mongo.bson.buffer.start.object(buf, "$inc")
mongo.bson.buffer.append(buf,as.character(tslot), 1L)
mongo.bson.buffer.finish.object(buf)
objNew <- mongo.bson.from.buffer(buf)
mongo.update(mongo, ns_agg,criteria,objNew,mongo.update.upsert)
}
mongo.cursor.destroy(cursor)
}
system.time(loop_aggregation(mongo = mongo))
t0 <- proc.time()
t0 <- proc.time()
loop_aggregation(mongo = mongo)
t1 <- proc.time()
t1 - t0
t0
t0 <- System.time()
t0 <- Sys.time()
t0 <- Sys.time()
loop_aggregation(mongo = mongo)
t1 <- Sys.time()
